#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <unordered_map>
#include <sstream>
#include <memory>

using namespace std;

// Base class for questions
class QuestionBase {
protected:
    string questionText;

public:
    QuestionBase(const string& q) : questionText(q) {}
    virtual ~QuestionBase() = default;

    virtual void displayQuestion(int questionNumber) const = 0;
    virtual bool isCorrect(const string& answer) const = 0;
};

// Derived class for multiple-choice questions
class MultipleChoiceQuestion : public QuestionBase {
private:
    string options[4];
    string correctAnswer;

public:
    MultipleChoiceQuestion(const string& q, string opt[], const string& correct)
        : QuestionBase(q), correctAnswer(correct) {
        for (int i = 0; i < 4; ++i) {
            options[i] = opt[i];
        }
    }

    // Constructor to parse a line from a file
    MultipleChoiceQuestion(const string& line) : QuestionBase("") {
        stringstream ss(line);
        getline(ss, questionText, ',');
        for (int i = 0; i < 4; ++i) {
            getline(ss, options[i], ',');
        }
        getline(ss, correctAnswer);
    }

    void displayQuestion(int questionNumber) const override {
        cout << "Q" << questionNumber << ": " << questionText << endl;
        for (int i = 0; i < 4; ++i) {
            cout << i + 1 << ". " << options[i] << endl;
        }
    }

    bool isCorrect(const string& answer) const override {
        string lowerAnswer = answer;
        string lowerCorrect = correctAnswer;
        transform(lowerAnswer.begin(), lowerAnswer.end(), lowerAnswer.begin(), ::tolower);
        transform(lowerCorrect.begin(), lowerCorrect.end(), lowerCorrect.begin(), ::tolower);
        lowerAnswer.erase(lowerAnswer.find_last_not_of(" \n\r\t") + 1);
        lowerCorrect.erase(lowerCorrect.find_last_not_of(" \n\r\t") + 1);
        return lowerAnswer == lowerCorrect;
    }
};

// Quiz class
class Quiz {
private:
    vector<unique_ptr<QuestionBase>> questions;
    int score;

public:
    Quiz() : score(0) {}

    void addQuestion(unique_ptr<QuestionBase> q) {
        questions.push_back(move(q));
    }

    void startQuiz() {
        string answer;
        for (size_t i = 0; i < questions.size(); ++i) {
            questions[i]->displayQuestion(i + 1);
            cout << "Your answer: ";
            getline(cin, answer);
            if (answer.empty()) {
                cout << "Answer cannot be empty. Please try again." << endl;
                --i; // Ask the same question again
                continue;
            }
            if (questions[i]->isCorrect(answer)) {
                cout << "Correct!" << endl;
                score++;
            } else {
                cout << "Wrong!" << endl;
            }
            cout << endl;
        }
        cout << "Quiz finished. Your score is: " << score << "/" << questions.size() << endl;
    }
};

// User class
class User {
private:
    string name;
    string password;
    unordered_map<string, string> userDatabase;

public:
    User() {
        loadUsersFromFile("users.txt");
    }

    void loadUsersFromFile(const string& filename) {
        ifstream file(filename);
        if (!file.is_open()) {
            cerr << "Failed to open file: " << filename << endl;
            return;
        }

        string line;
        while (getline(file, line)) {
            if (!line.empty()) {
                stringstream ss(line);
                string username, pwd;
                getline(ss, username, ',');
                getline(ss, pwd);
                userDatabase[username] = pwd;
            }
        }

        file.close();
    }

    bool login() {
        string username, pwd;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> pwd;
        cin.ignore();

        if (userDatabase.find(username) != userDatabase.end() && userDatabase[username] == pwd) {
            name = username;
            return true;
        } else {
            cout << "Invalid username or password. Please try again." << endl;
            return false;
        }
    }

    void takeQuiz(Quiz& quiz) {
        cout << "Welcome " << name << "! Let's start the quiz." << endl << endl;
        quiz.startQuiz();
    }
};

// Helper function to create questions from a file
vector<unique_ptr<QuestionBase>> createQuestionsFromFile(const string& filename) {
    vector<unique_ptr<QuestionBase>> questions;
    ifstream file(filename);

    if (!file.is_open()) {
        cerr << "Failed to open file: " << filename << endl;
        return questions;
    }

    string line;
    while (getline(file, line)) {
        if (!line.empty()) {
            questions.push_back(make_unique<MultipleChoiceQuestion>(line));
        }
    }

    file.close();
    return questions;
}

// Main function
int main() {
    Quiz quiz;

    // Add questions to the quiz from file
    auto questions = createQuestionsFromFile("questions.txt");
    for (auto& q : questions) {
        quiz.addQuestion(move(q));
    }

    User user;
    bool loggedIn = false;
    while (!loggedIn) {
        loggedIn = user.login();
    }

    user.takeQuiz(quiz);

    return 0;
}
